# 0005 - Elección de Patrón para el Sistema de Pedidos en Tres Fases (Preprocesado, Autorización y Aceptación)

* **Status**: Proposed
* **Date**: 2024-11-07
* **Deciders**: Alejandro Rico, Daniel Rong
* **Consulted**: Elena Ceinos, Gaizka Aranbarri
* **Informed**: Jon Mazcuñán, Alberto Acebes, Pablo Villamayor

## Contexto y Problema

El sistema de pedidos pasa por tres fases secuenciales: **Preprocesado**, **Autorización** y **Aceptación**. Cada fase debe completarse correctamente antes de pasar a la siguiente. La implementación debe asegurar que cada fase procese el pedido de manera independiente y permita la adición de nuevas fases o modificaciones sin afectar el flujo existente. Además, se requiere un sistema que mantenga la lógica de procesamiento organizada y desacoplada para facilitar el mantenimiento y la escalabilidad.

## Drivers de Decisión

* Asegurar el procesamiento secuencial de cada fase (preprocesado, autorización, aceptación).
* Facilitar la escalabilidad y permitir la modificación o inclusión de nuevas fases en el proceso de manera flexible.
* Mantener el desacoplamiento entre las fases para un código más limpio y fácil de mantener.
* Lograr una implementación modular y flexible para el flujo de procesamiento de pedidos.

## Opciones Consideradas

1. Chain of Responsibility
2. Event Sourcing

## Comparación de Opciones

### Opción 1 - Chain of Responsibility

**Descripción**: El patrón Chain of Responsibility permite que una solicitud pase a través de una cadena de manejadores (handlers), donde cada manejador representa una fase del proceso. En este caso, cada manejador procesaría el pedido en una fase específica (preprocesado, autorización, aceptación) y decidiría si pasar el pedido a la siguiente fase o detener el flujo si el procesamiento falla.

**Ventajas**:
- **Desacoplamiento**: Cada fase del procesamiento (preprocesado, autorización, aceptación) se implementa en un manejador independiente, facilitando la modificación de cada fase sin afectar el resto del flujo.
- **Escalabilidad**: Permite añadir nuevas fases en la cadena sin modificar la estructura general, manteniendo el código modular y flexible.
- **Control de Flujo**: Cada manejador puede decidir si el pedido sigue a la siguiente fase o si se detiene en caso de fallo, lo que asegura un procesamiento seguro y secuencial.

**Desventajas**:
- **Complejidad en Seguimiento**: En flujos muy largos, puede ser complicado rastrear el paso de la solicitud entre manejadores.
- **Posible Sobrecarga de Objetos**: Requiere crear una instancia para cada manejador de fase, lo cual puede agregar carga si las fases se multiplican.

### Opción 2 - Event Sourcing

**Descripción**: El patrón Event Sourcing almacena cada cambio de estado de un sistema como un evento inmutable en un registro de eventos. En este caso, cada fase del procesamiento de pedidos generaría un evento que registra el cambio de estado. Para reconstruir el estado actual de un pedido, el sistema reproduciría todos los eventos en orden cronológico.

**Ventajas**:
- **Historial Completo de Cambios**: Proporciona un registro completo de cada fase por la que ha pasado un pedido, lo que permite auditar y rastrear el procesamiento de cada pedido.
- **Reproducibilidad y Depuración**: Permite reproducir el estado de un pedido en cualquier punto en el tiempo, facilitando la resolución de problemas y el análisis.
- **Escalabilidad y Tolerancia a Fallos**: Facilita la recuperación del sistema en caso de fallo, ya que permite reconstruir el estado de un pedido desde el registro de eventos.

**Desventajas**:
- **Complejidad de Implementación**: Implementar Event Sourcing requiere gestionar adecuadamente el registro de eventos y la reconstrucción del estado, lo que aumenta la complejidad de la solución.
- **Escalabilidad del Registro de Eventos**: A medida que el registro de eventos crece, podría plantear desafíos en almacenamiento y rendimiento.
- **Consistencia Eventual**: La reconstrucción del estado puede no ser inmediata, lo que introduce una consistencia eventual en lugar de una consistencia inmediata.

## Decisión

**Opción elegida: Chain of Responsibility**, ya que permite un flujo de procesamiento claro y secuencial de cada fase del pedido (preprocesado, autorización, aceptación), asegurando un desacoplamiento modular y facilitando la adición de nuevas fases sin complejidad adicional en el registro de eventos. Chain of Responsibility se alinea mejor con el requerimiento de un procesamiento secuencial y modular, mientras que Event Sourcing introduce una complejidad innecesaria en este caso.

## Consecuencias

### Consecuencias Positivas

* **Desacoplamiento y Flexibilidad**: Cada fase del proceso de pedidos es independiente, facilitando la modificación y mantenimiento de cada fase sin afectar el flujo general.
* **Escalabilidad**: La opción elegida permite añadir o modificar fases en el proceso de manera sencilla, sin necesidad de cambiar la estructura de la cadena.
* **Control de Flujo Seguro**: Chain of Responsibility permite detener el procesamiento en cualquier fase en caso de error, asegurando un flujo secuencial y seguro.

### Consecuencias Negativas

* **Dificultad de Seguimiento en Flujos Largos**: Si el proceso de pedidos requiere muchas fases adicionales en el futuro, el flujo de la cadena puede ser más difícil de rastrear.
* **Sobrecarga de Objetos**: La creación de manejadores para cada fase puede añadir complejidad en términos de objetos y aumentar ligeramente la carga de procesamiento.
